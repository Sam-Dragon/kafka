# Kafka Notes

- Kafka is used for asyncronous communication
- Majorly used for distributing messages across multiple other microservices
- Follows even-driven architecture
- It is publisher-subscriber model [pubsub model]
- It is useful in scaling

# Components
> Event
- An activity which has happened 
- It is immutable
- Naming Convention
<Noun><Action>Event --> ProductCreatedEvent

> Message vs Event
- Message is an envelope which contains an event in it which can be different formats [Json, String, Avro or Null]
- It can be in key value pair
- It contains key, value, timestamps, Headers [Optional]

> Producer
- The one who publishes the event to kafka broker

> Kafka Broker
- It can be physical computer or virtual machine which runs kafka processes.
- Server which accepts events from producer & stores in its hard disk
- It manages Kafka topics, handles the storage of data into topic partitions, 
  manages replication of data for fault tolerance, and serves client requests (from both Producers and Consumers).

> Topics
- It is under kafka broker which stores the events produced to a specific topic and save it in partition
- It is nothing but list of partiotions in which event is stored
- It is append only, new event is always added at the end 
- Its retention time is 7 days
- It provides support for parallel processing and load balancing

> Partition
- It is small storage unit which stores the data
- Events are in order within the partition. Order across partition is not maintained

> Consumer
- The one who consumes an event from kafka broker

# Ordering
- In case of message key is absent, the data can be stored in any of the partition. order is not followed and may raise conflicts
- In case of message key is provided, the data is always stored in 'single partition'

# Architecture
- Generally, we need more than broker. It works on leader-follwer server. 
- In case leader goes down, then one of the follower becomes leader and continue to work
- leader replicates the data into follower servers
- Every kafka broker can be leader and follower at same time.
- Each partition is assigned to a broker when topic is created/modified


# Disadavantages of stopping producers/consumers abruptly
- Avoid losing messages
- Avoid errors
- To gracefully shutdown kafka services is by calling kafka-server-stop.bat or kafka-server-stop.sh script

Note: 
- Queue is similiar to kafka topic but difference is event is not deleted once consumed. it stays on memory till cleaning process in not scheduled 
- Partitions can be increased even after configured but it cannot be decreased
